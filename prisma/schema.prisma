// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  memberId Int @id @default(autoincrement()) @map("memberId")
  id String @map("id")
  password String @map("password")
  name String @map("name")
  nickname String @map("nickname")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Profile Profile?
  GuestBook GuestBook[] // 사용자가 작성한 방명록
  Diaries Diaries[]
  Posts Posts[]
  Songs Songs[]
  Comments Comments[]
  Likes Likes[]

  @@map("Users")
}

model Profile {
  profileId Int @id @default(autoincrement()) @map("profileId")
  MemberId Int  @unique @map("MemberId")
  mood String  @map("mood")
  message String  @map("message") 
  introduction String @map("introduction") 
  profileImage String @map("profileImage")
  backgroundMusic String @default("https://www.youtube.com/watch?v=3AtDnEC4zak") @map("backgroundMusic")
  
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  User Users @relation(fields: [MemberId], references: [memberId], onDelete: Cascade)

  @@map("Profile")
}

model GuestBook {
  postId Int @id @default(autoincrement()) @map("postId")
  MemberId Int @map("MemberId") // 방명록 소유주의 아이디
  writerId Int @map("writerId")  // 글을 작성한 사용자의 아이디
  contents String @map("contents") @db.Text

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  User Users @relation(fields: [MemberId], references: [memberId], onDelete: Cascade)

  @@map("GuestBook")
}

model Diaries {
  diaryId Int @id @default(autoincrement()) @map("diaryId")
  MemberId Int @map("MemberId")
  contents String @map("contents") @db.Text

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  User Users @relation(fields: [MemberId], references: [memberId], onDelete: Cascade)

  @@map("Diary")
}

model Posts {
  postId Int @id @default(autoincrement()) @map("postId")
  MemberId Int @map("MemberId")
  writerId Int @map("writerId")
  title String @map("title")
  likeCount Int @default(0) @map("likeCount")
  contents String @map("contents") @db.Text

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  User Users @relation(fields: [MemberId], references: [memberId], onDelete: Cascade)
  Likes Likes[]
  Comments Comments[]

  @@map("Posts")
}

model Songs {
  songId Int @id @default(autoincrement()) @map("songId")
  MemberId Int @map("MemberId")
  songUrl String @map("songUrl")
  
  createdAt DateTime @default(now()) @map("createdAt")

  User Users @relation(fields: [MemberId], references: [memberId], onDelete: Cascade)

  @@map("Songs")
}

model Likes {
  likeId Int @id @default(autoincrement()) @map("likeId")
  PostId Int @map("PostId")
  MemberId Int @map("MemberId")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Post Posts @relation(fields: [PostId], references: [postId], onDelete: Cascade)
  User Users @relation(fields: [MemberId], references: [memberId], onDelete: Cascade)

  @@map("Likes")
}

model Comments {
  commentId Int @id @default(autoincrement()) @map("commentId")
  MemberId Int @map("MemberId")
  PostId Int @map("PostId")
  writerId Int @map("writerId")
  contents String @map("contents")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  User Users @relation(fields: [MemberId], references: [memberId], onDelete: Cascade)
  Post Posts @relation(fields: [PostId], references: [postId], onDelete: Cascade)

  @@map("Comments")
}